ー　レスポンス

user_planのidって必要？
is_activeキーを持たせる
user_planのデータの必要性



ー　実装

①mst_user_planの全レコードをSubscriptionStatusCollectionに渡す

//Controller
$mst_user_plans = MstUserPlan::activePlan();

new SubscriptionStatusCollection($mst_user_plans, $user)


//SubscriptionStatusCollection

$this->resource->each(function ($mst_user_plan) {
    $mst_user_plan->user = $this->user;
});

$this->resource = $this->resource->map(function ($mst_user_plan) {
    return $mst_user_plan->user = $this->user;
});

$sorted_collection = SubscriptionStatusResource::collection($this->resource)->sortBy('active_user_plan.start_date');

return [
    'data' => $sorted_collection,
];


//SubscriptionStatusResource

$this->subscription = new PremiumPlan->as($this->user);

レスポンスにuser_planのデータを持たせる：active_user_planキー








②mst_user_planの全レコードをSubscriptionStatusCollectionに渡す

//Controller
$subscription = new PremiumPlan->as($this->user);

$active_user_plans = $subscription->user_plans;

new SubscriptionStatusCollection($active_user_plans, $user)


//SubscriptionStatusCollection

$active_mst_user_plan_ids = $this->resource->pluck('mst_user_plan_id');
$inactive_mst_user_plans = MstUserPlan::whereNot('id', $active_mst_user_plan_ids);

$this->resource->orderByDesc('start_date');





$this->resource->each(function ($mst_user_plan) {
    $mst_user_plan->user = $this->user;
});

$this->resource = $this->resource->map(function ($mst_user_plan) {
    return $mst_user_plan->user = $this->user;
});


$collection = SubscriptionStatusResource::collection($this->collection);

$this->collection->each(function ($mst_user_plan) {
    if ($mst_user_plan->subscription->user_plan($mst_user_plan->plan_type))
    $mst_user_plan->user = $this->user;
});





return [
    'data' => $sorted_collection,
];


//SubscriptionStatusResource

$this->subscription = new PremiumPlan->as($this->user);

レスポンスにuser_planのデータを持たせる：active_user_planキー






③無理にPremiumPlanを使わない

//Controller
$user = Auth::user();
$mst_user_plans = MstUserPlan::activePlan();

new SubscriptionStatusCollection($mst_user_plans, $user)


//SubscriptionStatusCollection

ログインユーザーの有効なuser_planと関連するmst_user_plan、関連のないmst_user_plan、両方のデータがほしい

$mst_user_plans = MstUserPlan::activePlan(); // 有効なmst_user_planの全データを取得 これget()してる？？
$mst_user_plan_ids = $mst_user_plans->pluck('id');

$active_mst_user_plans = $mst_user_plans->whereHas('users', function ($query) {
    $query->    // 有効なプランに絞る
});

$active_mst_user_plans = $mst_user_plans->withWhereHas('users', function ($query) {
    $query->    // 有効なプランに絞る・ログインユーザーに関連するデータに絞る
});

withWhereHasじゃないとuser_planのデータは入ってこない？

⇒　目的のデータを含んだmst_user_planのデータを取得できる && user_planのデータ内にログインユーザーのidも含まれている。


$active_mst_user_plans = $mst_user_plans->sortByDesc('user_plan.start_date');
⇒　加入日の降順で並び替え


$inactive_mst_user_plans = $mst_user_plans->whereNotIn('id', $mst_user_plan_ids);  // ここの$mst_user_plansはいろいろ処理が実行されたやつ？？


$active_plan_collection = SubscriptionStatusResource::collection($active_mst_user_plans);
$inactive_plan_collection = SubscriptionStatusResource::collection($inactive_mst_user_plans);  // 別のリソースにする？

$plan_collection = 結合;

toArray
return [
    'data' => $plan_collection,
];


//SubscriptionStatusResource

$this->subscription = new PremiumPlan->as($this->resource->user_plan->user_id);






④２回PremiumPlanクラスのインスタンスを生成する

//Controller
$user = Auth::user();
$mst_user_plans = MstUserPlan::activePlan();

new SubscriptionStatusCollection($mst_user_plans, $user)


//SubscriptionStatusCollection

$this->subscription = new PremiumPlan->as($user);

ログインユーザーの有効なuser_planと関連するmst_user_plan、関連のないmst_user_plan、両方のデータがほしい

$mst_user_plans = $this->subscription->mst_user_plans; // 有効なmst_user_planの全データを取得 これget()してる？？
$mst_user_plan_ids = $mst_user_plans->pluck('id');

$mst_user_plans->each(function ($mst_user_plan) {
    $mst_user_plan->active_user_plan = $this->subscription->user_plan($mst_user_plan->plan_type); ❗これできない気がする！！
});
⇒　目的のデータを含んだmst_user_planのデータを取得できる && user_planのデータ内にログインユーザーのidも含まれている。

$mst_user_plans->sortByDesc('active_user_plan.start_date');
⇒　加入日の降順で並び替え

＊未加入プランも順番を指定したいときはこんな感じで別のコレクションに分離させてから並び替え？
list($satisfied, $unsatisfied) = $collection->partition(function ($item) {
    return $item['age'] > 25; // ここに条件を指定する
});


toArray
return [
    'data' => SubscriptionStatusResource::collection($mst_user_plans),
];


//SubscriptionStatusResource

$this->subscription = new PremiumPlan->as($this->resource->active_user_plan->user_id);




⑤個々のリソースを作る

$collection = collect();
$mst_user_plans->each(function ($plan) {
    $subscription = new PremiumPlan($plan->plan_type)->as($user);
    $active_user_plan = $subscription->user_plan;
    $collection->add???(new SubscriptionStatusResource($active_user_plan, $subscription));
});

$collection->sortByDesc('active_user_plan.start_date');

return response($collection);
