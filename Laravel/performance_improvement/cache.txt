https://readouble.com/laravel/9.x/ja/cache.html



🟡キャッシュ
データ取得やタスクの中には、CPUに負荷がかったり、完了するまでに数秒かかったりするときがある。
⇒キャッシュを利用して、パフォーマンスを向上させられる。
...一時的にデータを保存することで、同じデータに再アクセスする際にデータベースや他の処理を再度実行せずに高速に取得できます。

ー　保存場所
キャッシュするデータは通常、MemcachedやRedisなどの高速なデータストアに保存する。

ー　シリアライズ
キャッシュに保存するデータは通常シリアル化（直列化）される。
...オブジェクトや配列などの複雑なデータ構造を文字列に変換して保存するプロセスで、
シリアライズ後のデータは、再度必要になった際にデシリアライズして元のデータ構造に戻される。



🔵キャッシュの使い時

・データ取得に時間がかかる場合
・データの変更が頻繁でない場合
・計算コストが高い操作の結果を再利用する場合
・一時的なデータの保存（セッションデータなど）
・外部サービスからのデータを高速に取得する場合

❗キャッシュを使う際にはデータの整合性に気を付ける必要があり、適切な期限や条件でキャッシュをクリアすることが重要。



🔵設定
設定ファイル...config/cache.php

❗ファイル内のコメントで説明しているオプションがいろいろあるので、チェックする。

アプリ全体でデフォルトで使用するキャッシュドライバを指定する。



🔵キャッシュドライバ
file、array、null、database、Memcached、Redis、DynamoDB

ー　fileキャッシュドライバ
デフォルトのキャッシュドライバ
...シリアルライズ後、キャッシュを保存するファイルが作成され（通常はstorage/framework/cacheディレクトリ）、データが保存される。

ー　いろいろなキャッシュドライバの要件
ガイド「ドライバ要件」



🔵カスタムキャッシュドライバ
ガイド「カスタムキャッシュドライバの追加」

ー　使いどころの例

・データストアが標準のデータベースやメモリストアではない場合（例：外部サービスやDBテーブル、ファイルシステム）
・カスタムなキャッシュの要件がある（例：特定のデータの期限を動的に変更する必要がある）
・カスタムなセキュリティ機能やアクセス制御が必要（例：特定のデータへのアクセスを厳密に管理する）
・外部サービス（例: Redis、Memcached以外のサービス）との密接な統合が必要
・特定のパフォーマンス要件や最適化を実現する必要がある（例：特定のアルゴリズムやデータ構造を使用して高速なキャッシュ機構を構築）



🔵キャッシュインスタンスへのアクセス
Cacheファザード・cache()ヘルパ

データの取得、削除、保存、判定など

ガイド「キャッシュ使用法」



🔵タグを付ける
キャッシュにタグを付けることで、同じタグが付いたキャッシュをまとめて操作できる。
ガイド「キャッシュタグ」

※file、dynamodb、databaseキャッシュドライバ以外で利用可能



🔵キャッシュ操作時のイベント
ガイド「イベント」



🔵同時アクセスによるデータの不整合を防ぐ
アトミックロックの利用

キャッシュに対して一度に1つの操作しかできないようにする。
⇒複数のプログラムやスレッドが同時に同じデータにアクセスして操作することを防ぎ、データの破損や不整合を防ぐことができる。

ー　使いどころ

・同時アクセスが起きる可能性がある場合
・データの整合性が重要な場合

ー　注意点
・パフォーマンスへの影響：アトミックロックは排他的な処理を導入するため、同時実行が制限され、性能が低下する可能性がある。
・デッドロックの危険性：複数のプロセスまたはスレッドが相互に必要とするリソースを持ち合って、全てのプロセスが進まなくなる状態
　⇒プロセスやスレッドが永遠に待機し続ける。
　⇒適切なロック順序やタイムアウトの設定が必要。

※アトミックロック以外にも、セマフォやミューテックスなどがある

ガイド「アトミックロック」
