https://readouble.com/laravel/9.x/ja/eloquent.html



🟡データベースレコードの操作



🔵新しいレコードの登録

🟢save()
返り値：保存の成功でtrue・失敗でfalse

🟢create()
複数のカラムの値を一度に設定（複数代入）できる。
返り値：作成したモデルのインスタンス
⇒fillable・guardedプロパティを指定する必要がある。

🟢検索してなければ新規作成・生成
firstOrCreate・firstOrNew：別項参照



🔵コピーの生成
replicate()

例）
$shipping = Address::create([
    'type' => 'shipping',
    'line_1' => '123 Example Street',
    ///
]);

$billing = $shipping->replicate()->fill([
    'type' => 'billing'
]);
$billing->save();

🟢指定のカラムのデータのみコピー
replicateの引数に、コピーしたいカラム名の配列を渡す

例）
$billing = $shipping->replicate(['type' => 'billing']);



🔵更新

🟢save()
返り値：保存の成功でtrue・失敗でfalse

🟢一括更新
❗Eloquentで一括更新するとき、モデルが実際に取得されるわけではないため、
　saving、saved、updating、updatedモデルイベントが発生しない。

update()
適用したすべてのレコードを一括で更新する。
返り値：更新したレコードの数

🟢レコードがあれば更新、なければ新規作成

ー　１レコードのみ
updateOrCreate
レコードを更新する時に、対象のレコードが存在しないとき新しいレコードを作成

第１引数：レコードの指定（対象となるレコードが持つカラムと値を指定）
第２引数：更新するカラムを値を指定
例）
$flight = Flight::updateOrCreate(
    ['departure' => 'Oakland', 'destination' => 'San Diego'],
    ['price' => 99, 'discounted' => 1]
);

ー　複数レコードを一括
upsert()

＊引数はすべて配列で指定する⇒複数指定できる
第１引数：更新or新規作成するカラムと値を指定
第２引数：idカラム（レコードを一意に識別できるカラム）
第３引数：更新するカラムを指定

$data = [
    ['id' => 1,'departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],
    ['id' => 2,'departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]
]
Flight::upsert($data, ['id'], ['price']);

🟢updated_atを変更せずに更新
withoutTimestampsのクロージャ内で、更新の処理をする。

Model::withoutTimestamps(fn () => $post->increment(['reads']));



🔵複数代入（複数の属性値をまとめてセットする）
＊fillableとguardedプロパティを設定する必要あり

🟢fill
インスタンスに対して複数代入する
例）$flight->fill(['name' => 'Amsterdam', number => '400']);

🟢create()
インスタンスの作成、複数代入、保存のすべてができる。

🟢すべての複数代入を可能にする
protected $guarded = [];
❗セキュリティ上の問題あり

🟢許可していない代入があったときにエラーを発生させる
参照：eloquent.txt「🔵バグを未然に防ぐ」

＊JSONカラム：ガイド「一括割り当てとJSONカラム」



🔵モデルのインスタンスをDBのデータと同期させる（最新にする）
DBデータを操作する処理をしたとき、そのときのインスタンスと実際のDBのデータが異なることがある。

例）同期が必要になるとき
$post = Post::make();
$post->title = 'foo';
$post->save();

$comment = Comment::make();
$comment->comment = 'bar';

$post->comments()->save($comment);

$post->comments;　空のコレクションが返ってくる

🟢flesh
インスタンスの状態（絞り込みなど）を維持したまま、DBから新しいインスタンスを取得する（最新の状態になったインスタンス）
＊もともとのインスタンスとは別物で、もとのインスタンスは同期されないまま

例）
$flight = Flight::where('number', '900')->first();

// DBデータを変更する処理Aを行う

$freshFlight = $flight->fresh();　Aが反映されたレコードを取得する（where('number', '900')->first()の絞り込みも残る）
$flight　Aは依然反映されていない

🟢reflesh
インスタンス自体を最新の状態に更新する。（そのインスタンスがロードしている関連テーブルのデータも更新される。）

例）
$flight = Flight::where('number', '900')->first();

$flight->number = '400';
$flight->number;　400が返ってくる

$flight->refresh();

$flight->number;　900が返ってくる



🔵変更の有無を判定

🟢保存前の変更
isDirty()
モデルインスタンス取得後に、属性が変更されたかを判定。

isClean()
モデルインスタンス取得後、属性が変更されていないことを判定。

例）
$user = User::create([
    'first_name' => 'Taylor',
    'title' => 'Developer',
]);

$user->title = 'Painter';

$user->isDirty(); // true
$user->isClean(); // false

$user->isDirty('title'); // true
$user->isDirty('first_name'); // false
$user->isDirty(['first_name', 'title']); // true　いずれかの属性に変更があったかを判定できます

🟢保存後の変更
wasChanged()
現在のリクエストサイクル内で、モデルインスタンスの最後の保存時に属性に変更が起きたかを判別する。

例）
$user = User::create([
    'title' => 'Developer',
    ///
]);

$user->title = 'Painter';
$user->save();

$user->wasChanged(); // true
$user->wasChanged('title'); // true



🔵属性の変更・保存前の値を取得する
getOriginal()
属性の変更や、保存が実行された後でも、モデルインスタンスを取得した時点の値を取得できる。

例）
$user = User::find(1);
$user->name; // John
$user->name = "Jack";  ここで$user->save();を実行しても同じくJohnを返す

$user->getOriginal('name'); // John
$user->getOriginal(); // 元の属性の配列



🔵削除

🟢削除メソッド
ー　delete()
クエリビルダのオブジェクトを削除する

$flight = Flight::find(1);
$flight->delete();

Flight::where('active', 0)->delete(); *このとき、deletingおよびdeletedモデルイベントがディスパッチされない

ー　destroy()
引数のidを持つレコードを削除する。

Flight::destroy(1);
Flight::destroy(1, 2, 3);
Flight::destroy([1, 2, 3]);
Flight::destroy(collect([1, 2, 3]));

ー　truncate()
モデルのすべてのレコードを削除し、自動増分IDもリセットされる。

Flight::truncate();

🟢ソフトデリート
レコードを削除
⇒実際にDBからは削除されず、deleted_atカラムに削除操作した日時が保存される。

ー　使い方
・データベーステーブルにdeleted_atカラムを追加する（マイグレーションファイルの書き方：ガイド「ソフトデリート」）
・Illuminate\Database\Eloquent\SoftDeletesトレイトをモデルに追加する。

ー　ソフトデリートされたレコード
すべてのクエリ結果から除外される。

ー　ソフトデリートされているか確認する
trashed()

if ($flight->trashed()) { // }

ー　復元する
restore()
ガイド「ソフトデリートしたモデルの復元」

ー　完全な削除
forceDelete()
ガイド「モデルの完全な削除」

ー　ソフトデリートしたレコードを含める
withTrashed()
ガイド「ソフトデリートモデルを含める」

ー　ソフトデリートレコードのみを取得する
onlyTrashed()

🟢データの定期削除
Prunableトレイトの使用
ガイド「モデルの整理」
