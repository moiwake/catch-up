https://readouble.com/laravel/9.x/ja/eloquent-relationships.html



🟡リレーション



🟡１対〇〇のリレーション

＊外部キーの命名をカスタマイズしたり、id以外のカラムにしたりしたいときは設定が必要

🔵１対１
hasOne：親
belongsTo：子


🔵１対多
hasMany：親
belongsTo：子

ー　関連先のモデルを取得する
$comments = Post::find(1)->comments;

$post = $comment->post->title;

ー　関連先のモデルを検索して取得する
$comment = Post::find(1)->comments()
                ->where('title', 'foo')
                ->first();


🔵１対１対１
１対１の関係を持つモデルが２セットあるとき、１つを中間テーブルとして、３つのモデルでリレーション定義できる。

図解：https://qiita.com/sgrs38/items/af0a5082f666f268e4cc#hasonethrough

ー　定義方法
$this->hasOneThrough(Owner::class, Car::class);

＊以下のようにも書ける
return $this->through('cars')->has('owner');
return $this->throughCars()->hasOwner();

＊外部キーのカスタム
ガイド：Has One Through「キーの規約」

ー　イメージのDB構成
mechanics
    id - integer
    name - string

cars
    id - integer
    model - string
    mechanic_id - integer

owners
    id - integer
    name - string
    car_id - integer


🔵１対１対多
１対１の関係を持つモデルと、１対多の関係を持つモデルがあるとき、
１つを中間テーブルとして、３つのモデルでリレーション定義できる。

図解：https://qiita.com/sgrs38/items/af0a5082f666f268e4cc#hasmanythrough

ー　定義方法
$this->hasManyThrough(Deployment::class, Environment::class);

＊以下のようにも書ける
return $this->through('environments')->has('deployments');
return $this->throughEnvironments()->hasDeployments();

＊外部キーのカスタム
ガイド：Has Many Through「キーの規約」

ー　イメージのDB構成
projects
    id - integer
    name - string

environments
    id - integer
    project_id - integer
    name - string

deployments
    id - integer
    environment_id - integer
    commit_hash - string


🔵関連モデルのレコードを取得する

ー　リレーションのメソッドで取得
$posts = $user->posts()->get();

ー　whereBelongsTo()⭐
・どのモデルのレコードを取得したいのかが明確になる。
・親モデルがコレクションの場合でも関連レコードを取得できる。

$posts = Post::whereBelongsTo($user)->get();

$users = User::where('vip', true)->get();
$posts = Post::whereBelongsTo($users)->get();

＊ガイド「Belongs toリレーションのクエリ」


🔵関連付けがないレコードのリレーションの返り値

通常は、関連付けされてないレコードでリレーションを参照するとNULLになる。
⇒そのときが返す値のデフォルトを設定できる。

❗１対〇〇のときのみ設定できる　⇒　belongsTo、hasOne、hasOneThrough、morphOneのとき

＊ガイド「デフォルトモデル」




🟡多対多のリレーション

🔵多対多
関連させる両方のモデル：belongsToMany
中間テーブル：定義の必要なし

＊中間テーブルの名前は関連モデル名のアルファベット順（テーブル名と外部キーのカスタムができる）

ー　中間テーブルに外部キー以外のカラムがあるとき
withPivot()

$this->belongsToMany(Role::class)
    ->withPivot('active', 'status');

ー　中間テーブルのタイムスタンプを有効にする
withTimestamps()
created_at/updated_atのタイムスタンプが有効になる


🔵中間テーブルのモデル定義
多対多の中間テーブル：Pivotクラスを継承させて定義する。
ポリモーフィック多対多の中間テーブル：MorphPivotクラスを継承させて定義する。

🟢自動増分のプライマリーキーがあるとき
設定が必要：public $incrementing = true;


🔵中間テーブルのレコードを取得する

pivotメソッド：親モデルは中間テーブルのデータをpivotプロパティとして持つ
⇒親モデルのレコードのプロパティとして、紐づく中間テーブルのレコードを取得できる。

例）$role->pivot->created_at;

🟢pivotプロパティをカスタムする
as()
中間テーブルのデータをpivotプロパティではなく、指定のプロパティ名で持たせることができる。

例）$podcast->subscription->created_at;のようにアクセスできる。

$this->belongsToMany(Podcast::class)
    ->as('subscription')
    ->withTimestamps();




🟡ポリモーフィックリレーション
１つの子モデルを複数の親モデルで共有する関連付け。

ー　定義方法

①共有されるモデルのテーブル・・・外部キー（〇〇_id）とポリモーフィックタイプ（〇〇_type）のカラムを持たせる。
＊ableは慣習的に付けられているので、命名ルールではない。

②共有されるモデルにmorphToのリレーションを定義

③共有するモデルにmorphOneのリレーションを定義：引数でポリモーフィックタイプのカラム名を指定する（typeの前の部分）


🔵１対１のポリモーフィック
親子関係は１対１と同じ

例）Imageモデル（子モデル）をPostとUser（どちらも親モデル）の両方で共有している。
https://reffect.co.jp/laravel/perfect-understanding-polymorphic#Polymorphic-2

ー　イメージのDB構成
posts
    id - integer
    name - string

users
    id - integer
    name - string

images
    id - integer
    url - string
    imageable_id - integer
    imageable_type - string

ー　モデルの定義

class Image extends Model
{
    /**
     * 親のimageableなモデル（ユーザー／投稿）の取得
     */
    public function imageable()
    {
        return $this->morphTo();
    }
}

class Post extends Model
{
    /**
     * 投稿の画像を取得
     */
    public function image()
    {
        return $this->morphOne(Image::class, 'imageable');
    }
}

class User extends Model
{
    /**
     * ユーザーの画像を取得
     */
    public function image()
    {
        return $this->morphOne(Image::class, 'imageable');
    }
}

＊外部キーとポリモーフィックタイプのカスタム
ガイド：１対１（ポリモーフィック）：「キーの規約」

public function imageable()
{
    return $this->morphTo(__FUNCTION__, 'imageable_type', 'imageable_id');
}

__FUNCTION__：PHPのマジック定数で、実行するメソッドのメソッド名を文字列で取得する。例では'imageable'


🔵１対多のポリモーフィック
親子関係は１対多と同じ

例）Commentモデル（子モデル）をPostとVideo（どちらも親モデル）の両方で共有している。

ー　イメージのDB構成
posts
    id - integer
    title - string
    body - text

videos
    id - integer
    title - string
    url - string

comments
    id - integer
    body - text
    commentable_id - integer
    commentable_type - string

ー　モデルの定義

class Comment extends Model
{
    /**
     * commentableな親モデルの取得（投稿かビデオ）
     */
    public function commentable()
    {
        return $this->morphTo();
    }
}

class Post extends Model
{
    /**
     * このポストの全コメント取得
     */
    public function comments()
    {
        return $this->morphMany(Comment::class, 'commentable');
    }
}

class Video extends Model
{
    /**
     * このビデオの全コメント取得
     */
    public function comments()
    {
        return $this->morphMany(Comment::class, 'commentable');
    }
}


🔵多対多のポリモーフィック
個々の関係は多対多と同じ

例）Tagと、Postで、多対多の関係
　　Tagと、Videoでも、多対多の関係
　　TagをPostとVideoの両方で共有している。
　　
　　Taggable：中間テーブルのモデル

ー　イメージのDB構成
posts
    id - integer
    name - string

videos
    id - integer
    name - string

tags
    id - integer
    name - string

taggables
    tag_id - integer
    taggable_id - integer
    taggable_type - string

ー　モデルの定義

class Post extends Model
{
    /**
     * 投稿のすべてのタグを取得
     */
    public function tags()
    {
        return $this->morphToMany(Tag::class, 'taggable');
    }
}

class Tag extends Model
{
    /**
     * このタグを割り当てているすべての投稿を取得
     */
    public function posts()
    {
        return $this->morphedByMany(Post::class, 'taggable');
    }

    /**
     * このタグを割り当てているすべての動画を取得
     */
    public function videos()
    {
        return $this->morphedByMany(Video::class, 'taggable');
    }
}


🔵関連モデルのレコードを取得する
リレーションのメソッドで取得できる。

ー　共有されるモデル（子モデル）の取得
例）$image = $post->image;

ー　共有するモデル（親モデル）の取得
＊$imageのレコードと関連しているモデルのレコードを取得する（UserかPostのどちらか）

例）$imageable = $image->imageable;


🔵typeカラムに保存する値
ポリモーフィックのtypeを保存するカラムには、通常は完全修飾クラス名を保存する必要がある。

例）imagesテーブルのimageable_typeカラムは、'App\Models\Post'、もしくは'App\Models\User'を値とする

ー　指定の文字列で保存する
完全修飾クラス名のエイリアスをカラムの値として保存することができる。

例）imagesテーブルのimageable_typeカラムは、
　　'post'('App\Models\Post'のエイリアス)、もしくは'user'('App\Models\User'のエイリアス)を値とする

設定方法：ガイド「カスタムポリモーフィックタイプ」




🟡動的にリレーションを定義する
＊できるだけ使用しない方が良い
ガイド「動的リレーション」




🟡リレーションのメソッドでスコープを定義する

❗そもそもスコープとして定義すべきでは？
　必ずそのスコープでしか利用しないリレーションならいいのかな・・・？

🟢クエリメソッドを使用する

🟢最新・最古のレコードを取得(❗hasOneのみ？)

latestOfMany()・oldestOfMany()

引数なし：idが基準
引数あり：日時のデータを持つカラムを指定できる

🟢指定の制約をつける(❗hasOneのみ？)
ofMany()

❗？？普通にクエリメソッド使うのじゃだめ？？：要確認

例）
return $this->hasOne(Rent::class)->ofMany('price', 'min');

public function currentPricing()
{
    return $this->hasOne(Price::class)->ofMany([
        'published_at' => 'max',
        'id' => 'max',
    ], function ($query) {
        $query->where('published_at', '<', now());
    });
}

🟢中間テーブル
中間テーブルのクエリに使用できるメソッドを、リレーション定義で使用できる。
：wherePivot、wherePivotIn、wherePivotNotIn、wherePivotBetween、wherePivotNotBetween、
　wherePivotNull、wherePivotNotNull、orderByPivot

例）
$this->belongsToMany(Role::class)
    ->wherePivot('approved', 1);
