https://readouble.com/laravel/9.x/ja/eloquent-relationships.html
「リレーションのクエリ」



🟡リレーションのクエリ操作

🔵リレーションメソッドと、リレーションプロパティの使い分け

パフォーマンスの観点から、使い分けが必要になる。

リレーションメソッド：()あり　・・・post()
リレーションプロパティ：()なし　・・・post

ー　返り値の違い
リレーションメソッド：Illuminate\Database\Eloquent\Relations\HasManyのインスタンス
リレーションプロパティ：Illuminate\Database\Eloquent\Collectionのインスタンス

ー　読み込みの違い
リレーションメソッド：遅延読み込み（Lazy loading）⇒　N+1が発生する可能性あり
リレーションプロパティ：即時読み込み（Eager loading）

🟢制約を追加するとき（クエリメソッドをチェーンするとき）
リレーションメソッドを使用する

リレーションプロパティでチェーンをすると、その時点で関連するレコードを全件取得してしまう。

例）
$user->posts->where('active', 1)->get();
⇒$user->postsの時点で、該当するレコードを取得する。

$user->posts()->where('active', 1)->get();
⇒$user->posts()の時点では、レコードの取得は行われず、getの時点で実行される。
⇒取得するレコードの数が減る。

🟢制約を追加しないとき（メソッドチェーンをしないとき）
$user->posts; と $user->posts()->get();
どっちがいい？？？

おそらく・・・
レコードを取得して、それを返すだけの処理だった場合は、$user->posts;でも問題ない。
だが、各レコードを繰り返しの処理などで使用する場合には$user->posts()->get();を使わないとN+1になる？：要確認



🔵orWhere

❗リレーションのメソッドにorWhereをチェーンするときの注意点

orWhereはリレーションの制約と同じレベルで論理的にグループ化される
⇒関連しないレコードも一緒に取得される可能性がある

ー　関連レコードに、さらにOR条件の制約を付けたいとき

正しい）
$user->posts()
    ->where(function (Builder $query) {
        return $query->where('active', 1)
            ->orWhere('votes', '>=', 100);
    })
    ->get();

select *
from posts
where user_id = ? and (active = 1 or votes >= 100)

間違い）
$user->posts()
    ->where('active', 1)
    ->orWhere('votes', '>=', 100)
    ->get();

select *
from posts
where user_id = ? and active = 1 or votes >= 100  // votes >= 100の条件を満たすPostのレコードがすべて取得される



🔵対象モデルと関連するレコードがあれば取得

🟢関連するレコードがある
has

指定の関連テーブルのレコードを全件取得する。

例）$posts = Post::has('comments')->get(); // PostとCommentが関連しているとき、Commentと紐づいているPostのレコードを全件取得する。

ー　テーブルが持っているレコード数に制約をつける
引数に演算子とレコード数を指定する。

例）$posts = Post::has('comments', '>=', 3)->get();

ー　ネストした関連でもOK
引数のテーブル名でドット記法を使う

例）$posts = Post::has('comments.images')->get();
　　// PostとCommentが、CommetとImageが関連しているとき、Imageと紐づくCommentが紐づいているPostのレコードを全件取得する。

🟢関連先に単純な１条件をつける
whereRelation、orWhereRelation、
whereMorphRelation、orWhereMorphRelation

関連先のテーブルを検索して、そのレコードと紐づくレコードを取得する。

例）Commentの条件に該当するレコードと紐づくPostのレコードを取得する。
$posts = Post::whereRelation(
    'comments', 'created_at', '>=', now()->subHour()
)->get();

🟢関連先に複雑な条件をつける
whereHas・orWhereHas

関連先のテーブルを検索して、そのレコードと紐づくレコードを取得する。

例）commentsテーブルのcontentカラムを検索して、該当するレコードと１０件以上紐づいているPostのレコードを取得
$posts = Post::whereHas('comments', function (Builder $query) {
    $query->where('content', 'like', 'code%');　// 関連先のテーブルを検索
}, '>=', 10)->get();



🔵対象モデルと関連するレコードがなれば取得

🟢関連するレコードがない
doesntHave
＊使用方法はhasと同じ

🟢関連先に複雑な条件をつける
whereDoesntHave、orWhereDoesntHave
＊使用方法はwhereHas・orWhereHasと同じ



🔵ポリモーフィック関連

🟢関連先を検索し、紐づく/紐づかないレコードを取得
whereHasMorph、whereDoesntHaveMorph

第１引数：リレーション名
第２引数：検索するポリモーフィック関連のモデル名
第３引数：関連先のクエリを検索するクロージャー

例）クロージャーの条件に該当するPost、Videoのレコードと紐づくCommentのレコードを取得する。
$comments = Comment::whereHasMorph(
    'commentable',
    [Post::class, Video::class],
    function (Builder $query) {
        $query->where('title', 'like', 'code%');  // この検索結果のクエリと紐づくCommentのレコードを取得
    }
)->get();

ー　検索対象にするポリモーフィック関連のモデルを「全て」にする
第２引数の配列をワイルドカード「'*'」にする。

＊この操作を実行するために追加のクエリ発行がある？？

ー　ポリモーフィックタイプを制約に追加したいとき
クロージャーの第２引数は、タイプの値を受け取る

例）
$comments = Comment::whereHasMorph(
    'commentable',
    [Post::class, Video::class],
    function (Builder $query, $type) {  // $typeには、PostかVideoのcommentable_typeカラムの値が入る
        $column = $type === Post::class ? 'content' : 'title';

        $query->where($column, 'like', 'code%');
    }
)->get();



🔵関連先のレコード数を取得する
❗select句と併用する場合は、selectの後に使用する。

🟢取得対象モデルの取得と同時に
withCount
⇒結果のレコードに、「リレーション名_count」プロパティを追加する。

＊実際に関連先のレコードをロードせずに集計できる？？

例）
$posts = Post::withCount('comments')->get();

foreach ($posts as $post) {
    echo $post->comments_count;
}

ー　複数のリレーションを指定
引数を配列にして、複数のリレーションを指定できる。

例）$posts = Post::withCount(['votes', 'comments'])->get();

ー　集計する関連モデルに制約をつける
配列内にクロージャーを入れる。

例）
$posts = Post::withCount(['votes', 'comments' => function (Builder $query) {
    $query->where('content', 'like', 'code%');
}])->get();

echo $posts[0]->votes_count;
echo $posts[0]->comments_count;

ー　同じリレーションで、別条件パターンの集計をする
同じリレーションでも、別名のプロパティとして、条件を変えて集計結果を含めることができる。

$posts = Post::withCount([
    'comments',
    'comments as pending_comments_count' => function (Builder $query) {
        $query->where('approved', false);
    },
])->get();

echo $posts[0]->comments_count;  // 関連するCommentの全レコード数
echo $posts[0]->pending_comments_count;  // 関連するCommentのうち、クロージャーの条件に該当するレコード数

🟢取得対象モデルの取得の後に
loadCount
⇒対象のレコードに「リレーション名_count」プロパティを追加する。

例）
$book = Book::first();
$book->loadCount('genres');

＊応用的な使用方法はwithCountと同じ？？

🟢ポリモーフィックのとき

ー　関連するレコード数の取得
withCountでできる？？

ー　ポリモーフィック関連のレコードと、さらに関連しているレコードの数を取得する
morphWithCount
❗morphWithCountは直接使用するとEager Loadingにならないため、withメソッド内で使用した方が良い。

＊応用的な使用方法はwithCountと同じ？？

例）ActivityFeedは、Photo・Postモデルとポリモーフィック関連を持っている
　　PhotoはTagモデルと多対多の関連をもつ
　　PostはCommentモデルと多対多の関連をもつ

$activities = ActivityFeed::with([
    'parentable' => function (MorphTo $morphTo) {
        $morphTo->morphWithCount([
            Photo::class => ['tags'],  // Tagと関連するPhotoのレコード数を取得
            Post::class => ['comments'],  // Commentと関連するPostのレコード数を取得
        ]);
    }])->get();


loadMorphCount

例）
$activities = ActivityFeed::with('parentable')->get();

$activities->loadMorphCount('parentable', [
    Photo::class => ['tags'],
    Post::class => ['comments'],
]);



🔵関連先のレコード数に集計処理をして取得する
❗select句と併用する場合は、selectの後に使用する。

🟢取得対象モデルの取得と同時に
withMin、withMax、withAvg、withSum、withExists
⇒結果のレコードに、「リレーション名_集計機能名_column」プロパティを追加する。

例）
$posts = Post::withSum('comments', 'votes')->get();

foreach ($posts as $post) {
    echo $post->comments_sum_votes;
}

ー　追加するプロパティ名を指定する
第１引数に「as 別名」を付ける

例）
$posts = Post::withSum('comments as total_comments', 'votes')->get();

foreach ($posts as $post) {
    echo $post->total_comments;
}

🟢取得対象モデルの取得の後に
loadMin、loadMax、loadAvg、loadSum、loadExists
⇒対象のレコードに「リレーション名_count」プロパティを追加する。

例）
$post = Post::first();
$post->loadSum('comments', 'votes');

＊応用的な使用方法はwithSumなどと同じ？？
