https://readouble.com/laravel/9.x/ja/database.html


Eloquentとクエリビルダは、Laravelにおけるデータベース操作の2つの異なるアプローチです。以下にそれぞれの特徴と違いを説明します。

Eloquent:

Eloquentは、LaravelのデフォルトのORM（Object-Relational Mapping）です。
モデルを使ってデータベースの操作を行います。モデルはデータベースのテーブルと対応し、各モデルのインスタンスはデータベースのレコードと対応します。
Eloquentを使うと、オブジェクト指向のアプローチでデータベースの操作を行うことができます。モデルを通じてデータを読み書きすることで、直感的でわかりやすいコードを書くことができます。
リレーションシップの定義やモデルのライフサイクルイベントへのフックなど、便利な機能が多数提供されています。
クエリビルダ:

クエリビルダは、データベースクエリをPHPのメソッドチェーンを使用して構築するためのAPIです。
クエリビルダを使用すると、SQLクエリを直接書く代わりに、PHPのコードを使用してデータベースの操作を行うことができます。
データベースの操作を細かく制御したり、動的なクエリを構築したりする場合に便利です。また、複雑なJOINやサブクエリを含むクエリを構築する際にも役立ちます。
Eloquentのモデルを使用せずに、直接データベーステーブルに対してクエリを実行したい場合にも使用されます。
Eloquentは、オブジェクト指向のアプローチを使用してデータベースの操作を行うことができる一方で、クエリビルダはより柔軟な方法でデータベースクエリを構築することができます。一般的には、Eloquentを使ってデータベースの操作を行うことが多いですが、特定のケースではクエリビルダを使用することもあります。


🟡データベース

ー　データベースの設定
ガイド「イントロダクション」



🔵生のSQLを書く必要があるとき
DBファサードのメソッドを使う。

ガイド「SQLクエリの実行」



🔵複数データベースを使用している
指定のDBにアクセスする
例）DB::connection('sqlite')

ガイド「複数データベース接続の使用」



🔵クエリのイベントをリッスンする
ログ記録でデバックで使用できる

例）クエリのログを記録する
DB::listen(function ($query) {
    \Log::info('Query: ' . $query->sql);　　発行したSQL
    \Log::info('Bindings: ' . json_encode($query->bindings));　取得したデータの中身が見れる
    \Log::info('Time: ' . $query->time . ' ms');　　処理速度
});

ガイド「クエリイベントのリッスン」



🔵クエリの実行時間に対応する処理の追加
クエリの実行時間が指定時間になったら呼び出せるクロージャやコールバックを設定

例）
DB::whenQueryingForLongerThan(500, function (Connection $connection, QueryExecuted $event) {
    // 開発チームへ通知を送る…
});

ガイド「累積クエリ時間の監視」



🔵トランザクション

🟢transaction()
トランザクションクロージャ内

例）
DB::transaction(function () {
    DB::update('update users set votes = 1');

    DB::delete('delete from posts');
});

＊試行回数の指定ができる

🟢手動で実行
通常はtry/catchの中で実行する

DB::beginTransaction();
DB::rollBack();
DB::commit();



🔵データベースを管理・確認する（artisan）

ガイド「データベースCLIへの接続」

・php artisan db
実行できるコマンドの一覧を表示

＊php artisan db mysql　DBの指定

・php artisan db:show
・php artisan db:table users

などなど・・・



🔵データベースの接続数を管理
クエリの発行が増えると、接続するデータベースの数も増える。

指定したデータベース接続数に達した時に発火するイベントを発行できる。
⇒リッスンして通知を送るなどの処理を設定できる。

例）php artisan db:monitor --databases=mysql,pgsql --max=100

ガイド「データベースの監視」
