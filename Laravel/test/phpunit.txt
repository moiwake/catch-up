https://readouble.com/laravel/9.x/ja/testing.html



🟡PHPUnit

ー　概要
ガイド「イントロダクション」

ー　設定
ガイド「環境」





🟡実行コマンド

🔵php artisan test
詳細なレポートが表示される

🟢並列で実行
php artisan test --parallel：並行してテストを実行できるため、実行時間を短縮できる。
⇒❗PHPUnitのオプション(-do-not-cafy-resultなど)が利用できない場合がある。

php artisan test --parallel --recreate-databases
テスト実行の際に、テストDBを作成し直すようになるため、テストの実行ごとにDBがリセットされ、
前のテストで作成されたデータや変更が他のテストに影響を与えることを防げる。

🟢適切にテストできているかを確認
※Xdebug/PCOVが必要

php artisan test --coverage
テストケースが実際にアプリケーションコードをどの程度カバーしているかどうか、
また、テストを実行する際にどれだけのアプリケーションコードが使用されているかを確認できる。




🔵./vendor/bin/phpunit





🟡並列テスト

🔵フックを設定する
setUpProcess: テストプロセスが開始される直前に実行される（初期化処理を行う）
setUpTestCase: 各テストケースが実行される直前に実行される
setUpTestDatabase: テストデータベースが作成された直後に実行される。⇒DB初期化された後に特定のデータをテストデータベースにロードする場合に使用
tearDownTestCase: 各テストケースが終了した直後に実行される（クリーンアップ処理）
tearDownProcess: テストプロセスが終了した直後に実行される

ー　定義方法
ParallelTestingファサードを使用する
ガイド「並列テストフック」



🔵並列実行しているテストに識別子を付ける
リソースが混ざらないようにするなど、それぞれのテストプロセスを区別したいとき
⇒専用のトークンを作成できる

$token = ParallelTesting::token();

ユースケース例）
・リソースの分割
・テストログやテスト結果を集約するときに各テストプロセスを識別する
・動的なリソースの割り当て
・テストデータベースの管理やクリーンアップを行うときに各テストプロセスを識別する
