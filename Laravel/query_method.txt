https://readouble.com/laravel/9.x/ja/queries.html



🟡クエリビルダのメソッドまとめ
①クエリビルダを返す
②コレクションを返す
③stdClassオブジェクトを返す
④その他を返す
⑤大量のレコードに対して処理を行う


🔵①クエリビルダを返す
table()




🔵②コレクションを返す
コレクションの中の各データは、stdClassオブジェクト（PHPの標準クラス）のインスタンス

$users = DB::table('users')->get();

foreach ($users as $user) {　　$users：コレクション
    echo $user->name;　　$user：stdClass
}

ー　stdClassオブジェクト
プロパティを持たない空のオブジェクトで、任意のプロパティを動的に追加できる。
⇒テーブルのカラムにないプロパティも設定できる。（テーブルに保存はできない。）

プロパティへのアクセス：　$object->property

🟢get()

🟢
🟢
🟢
🟢
🟢
🟢


🔵③stdClassオブジェクトを返す

🟢first()

🟢find()

🟢
🟢
🟢
🟢
🟢
🟢



🔵④その他

🟢value()
最初に見つけたレコードから、指定のカラムの値を返す。
例）DB::table('users')->value('email');　　usersテーブルのレコードの中から、最初に見つかったレコードのemailカラムの値を返す

🟢pluck()

ー　引数１つ
指定したカラムの値をすべて含んだコレクションを返す。

ー　引数２つ
指定した２つのカラムの値すべてが、それぞれキーと値になった（第２引数：キー、第１引数：値）コレクションを返す。

例）DB::table('users')->pluck('role', 'name');

返り値
[
    'John' => 'Manager',
    'Alice' => 'Developer',
    //
]

🟢
🟢
🟢
🟢


🔵⑤大量のレコードに対して処理を行う

🟢chunk()
各チャンク（レコードを指定のレコード数で小分けにする）をクロージャで処理する。
⇒大量のレコードに対して処理行うときに、メモリの使用量を最適化できる。

例）usersテーブルに全部で300レコードが存在したとき、100レコードずつ、3回に分けて処理をしたい。
DB::table('users')->orderBy('id')->chunk(100, function ($users) {
    foreach ($users as $user) {
        //
    }
});

❗chunkでレコードを更新・削除はしない！
主キー/外部キーの変更が影響して、レコードが期待したように処理されないことがある。

🟢lazy()
LazyCollectionを返す。

